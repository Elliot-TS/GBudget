'use server';
import {revalidatePath} from 'next/cache';
import {Budget, DataModel, Database, Comment} from 'lib/data';
import {redirect} from 'next/navigation';

// ReviewActionController
export async function TESTapproveBudgetAction(
  dataModel: DataModel,
  budget: Budget
): Promise<void> {
  // TODO: Change budget status to approved

  revalidatePath('/dashboard');
  revalidatePath(`/budget/${budget.id}`);
  redirect('/dashboard');
}
export async function approveBudgetAction(budget: Budget): Promise<void> {
  TESTapproveBudgetAction(new DataModel(Database), budget);
}

export async function TESTdenyBudgetAction(
  dataModel: DataModel,
  budget: Budget
): Promise<void> {
  // Commit all the comments for each item
  dataModel.pushAllBudgetComments(budget.id);

  // TODO: Change budget status to denied
  // Redirect to the dashboard
  revalidatePath('/dashboard');
  revalidatePath(`/budget/${budget.id}`);
  redirect('/dashboard');
}
export async function denyBudgetAction(budget: Budget): Promise<void> {
  TESTdenyBudgetAction(new DataModel(Database), budget);
}

export async function TESTclearCommentsAction(
  dataModel: DataModel,
  budget: Budget
): Promise<void> {
  dataModel.clearItemComments(budget.id);
}
export async function clearCommentsAction(budget: Budget): Promise<void> {
  TESTclearCommentsAction(new DataModel(Database), budget);
}

export type ReviewActionController = {
  approveBudget: (budget: Budget) => Promise<void>;
  denyBudget: (budget: Budget) => Promise<void>;
  clearComments: (budget: Budget) => Promise<void>;
};

// EventCommentThreadController
export async function TESTaddEventCommentAction(
  dataModel: DataModel,
  budget: Budget,
  comment: Comment
): Promise<void> {
  if (comment.comment === '') dataModel.popBudgetComment(budget.id);
  else dataModel.stageBudgetComment(budget.id, comment);
}
export async function addEventCommentAction(
  budget: Budget,
  comment: Comment
): Promise<void> {
  TESTaddEventCommentAction(new DataModel(Database), budget, comment);
}

// [These two functions were generated with copilot]
export async function TESTdeleteEventCommentAction(
  dataModel: DataModel,
  budget: Budget
): Promise<void> {
  dataModel.popBudgetComment(budget.id);
}
export async function deleteEventCommentAction(budget: Budget): Promise<void> {
  TESTdeleteEventCommentAction(new DataModel(Database), budget);
}

export async function TESTgetPreviousEventCommentsAction(
  dataModel: DataModel,
  budget: Budget
): Promise<Comment[]> {
  const comments: Comment[] = [];
  for (const commentID of budget.prev_commentIDs) {
    const comment = await dataModel.getComment(commentID);
    comments.push(comment);
  }
  return comments;
}
export async function getPreviousEventCommentsAction(
  budget: Budget
): Promise<Comment[]> {
  return TESTgetPreviousEventCommentsAction(new DataModel(Database), budget);
}

// [this type was generated by copilot]
export type EventCommentThreadController = {
  addEventComment: (budget: Budget, comment: Comment) => Promise<void>;
  deleteEventComment: (budget: Budget) => Promise<void>;
  getPreviousComments: (budget: Budget) => Promise<Comment[]>;
  comment: Comment;
};
