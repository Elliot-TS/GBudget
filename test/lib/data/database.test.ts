import {Document} from 'lib/data';
import {beforeEach, describe, expect, test} from 'vitest';
import {getFirestore} from 'firebase/firestore';
import {clearCollection, getLocalFirebase} from '../../utils/database.util';

// Set up a Firestore Database for testing
const db = getFirestore();
const database = getLocalFirebase(db);
const collection_name = 'test_collection';

interface TestDocument extends Document {
  field: string;
}

beforeEach(() => {
  // Make sure test collection is empty for tests
  clearCollection(database, collection_name);
});

describe('Test FirestoreDatabase class', async () => {
  // Create a database

  const testDocuments: TestDocument[] = [1, 2, 3].map(num => {
    return {
      id: `testDocument${num}`,
      field: `test_document${num}`,
    };
  });

  test('adding with addDocument and getDocument work', async () => {
    // Add test documents to collection
    testDocuments.forEach(async document => {
      await database.addDocument(collection_name, document);
    });

    // Test getDocument
    const doc1 = await database.getDocument<TestDocument>(
      collection_name,
      'testDocument1'
    );
    const doc2 = await database.getDocument<TestDocument>(
      collection_name,
      'testDocument2'
    );
    const doc3 = await database.getDocument<TestDocument>(
      collection_name,
      'testDocument3'
    );

    expect(doc1).toEqual(testDocuments[0]);
    expect(doc2).toEqual(testDocuments[1]);
    expect(doc3).toEqual(testDocuments[2]);
  });

  // Test deleteDocument
  test('check that documents are deleted correctly', async () => {
    // Add dummy documents
    testDocuments.forEach(async document => {
      await database.addDocument(collection_name, document);
    });
    // Delete them the first two
    await database.deleteDocument(collection_name, testDocuments[0]);
    await database.deleteDocument(collection_name, testDocuments[1]);

    await expect(() =>
      database.getDocument<Document>(collection_name, testDocuments[0].id)
    ).rejects.toThrowError();

    await expect(() =>
      database.getDocument<Document>(collection_name, testDocuments[1].id)
    ).rejects.toThrowError();

    const doc = await database.getDocument<TestDocument>(
      collection_name,
      testDocuments[2].id
    );
    expect(doc).toEqual(testDocuments[2]);
  });

  /*
  test('test that autogenerated id works', async () => {
  }

  // Test addDocument
  const {['id']: _, ...doc1Data} = testDocument1; // This removes the id field
  const {['id']: __, ...doc2Data} = testDocument2;
  const {['id']: ___, ...doc3Data} = testDocument3;
  const id1 = await database.addDocument(collection_name, doc1Data);
  const id2 = await database.addDocument(collection_name, doc2Data);
  const id3 = await database.addDocument(collection_name, doc3Data);
  const testDocument4 = {
    id: id1,
    ...doc1Data,
  };
  const testDocument5 = {
    id: id2,
    ...doc2Data,
  };
  const testDocument6 = {
    id: id3,
    ...doc3Data,
  };

  // Test getDocuments
    // No Filters, Sort by id
    let docs = await database.getDocuments<TestDocument>(
      collection_name,
      [],
      new Sort('id')
    );
    expect(docs).toEqual([testDocument4, testDocument5, testDocument6]);

    // No Filters, Sort by id descending
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [],
      new Sort('id', false)
    );
    expect(docs).toEqual([testDocument6, testDocument5, testDocument4]);

    // No Filters, Sort by field
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [],
      new Sort('field')
    );
    expect(docs).toEqual([testDocument5, testDocument6, testDocument4]);

    // Filter number > 1, Sort by id
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [new Filter('number', '>', 1)],
      new Sort('id')
    );
    expect(docs).toEqual([testDocument5, testDocument6]);

    // Filter number > 1 and field == aardvark, Sort by id
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [new Filter('number', '>', 1), new Filter('field', '==', 'aardvark')],
      new Sort('id')
    );
    expect(docs).toEqual([testDocument5]);

    // Filter number > 2 and field == aardvark, Sort by id
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [new Filter('number', '>', 2), new Filter('field', '==', 'aardvark')],
      new Sort('id')
    );
    expect(docs).toEqual([]);
  });*/
});
