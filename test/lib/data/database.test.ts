import {Document} from 'lib/data';
import {beforeEach, describe, expect, test} from 'vitest';
import {getFirestore} from 'firebase/firestore';
import {clearCollection, getLocalFirebase} from '../../utils/database.util';
import {Filter, Sort} from '../../../src/lib/data/database';

// Set up a Firestore Database for testing
const db = getFirestore();
const database = getLocalFirebase(db);
const collection_name = 'test_collection';

interface TestDocument extends Document {
  field: string;
  number: number;
}

beforeEach(() => {
  // Make sure test collection is empty for tests
  clearCollection(database, collection_name);
});

describe('Test FirestoreDatabase class', async () => {
  // Create a database

  const testDocuments: TestDocument[] = [1, 2, 3].map(num => {
    return {
      id: `testDocument${num}`,
      field: `test_document${num}`,
      number: num,
    };
  });

  test('adding with addDocument and getDocument work', async () => {
    // Add test documents to collection
    for (const document of testDocuments) {
      await database.addDocument(collection_name, document);
    }

    // Test getDocument
    const doc1 = await database.getDocument<TestDocument>(
      collection_name,
      'testDocument1'
    );
    const doc2 = await database.getDocument<TestDocument>(
      collection_name,
      'testDocument2'
    );
    const doc3 = await database.getDocument<TestDocument>(
      collection_name,
      'testDocument3'
    );

    expect(doc1).toEqual(testDocuments[0]);
    expect(doc2).toEqual(testDocuments[1]);
    expect(doc3).toEqual(testDocuments[2]);

    // Clear Database
    clearCollection(database, collection_name);
  });

  // Test deleteDocument
  test('check that documents are deleted correctly', async () => {
    // Add dummy documents
    for (const document of testDocuments) {
      await database.addDocument(collection_name, document);
    }

    // Delete them the first two
    await database.deleteDocument(collection_name, testDocuments[0]);
    await database.deleteDocument(collection_name, testDocuments[1]);

    await expect(() =>
      database.getDocument<Document>(collection_name, testDocuments[0].id)
    ).rejects.toThrowError();

    await expect(() =>
      database.getDocument<Document>(collection_name, testDocuments[1].id)
    ).rejects.toThrowError();

    const doc = await database.getDocument<TestDocument>(
      collection_name,
      testDocuments[2].id
    );
    expect(doc).toEqual(testDocuments[2]);

    // Clear the database
    clearCollection(database, collection_name);
  });

  test('test that autogenerated id works', async () => {
    // Add test documents to collection
    const newTestDocuments: TestDocument[] = [];
    for (let i = 0; i < 3; i++) {
      const {['id']: _, ...docData} = testDocuments[i]; // This removes the id field
      const id = await database.addDocumentWithAutoID(collection_name, docData);
      newTestDocuments.push({
        id,
        ...docData,
      });
    }

    // const newTestDocuments: TestDocument[] = [];
    // const {['id']: _, ...docData} = testDocuments[0]; // This removes the id field
    // const {['id']: _, ...docData2} = testDocuments[1]; // This removes the id field
    // const {['id']: _, ...docData3} = testDocuments[2]; // This removes the id field
    // const id1 = await database.addDocumentWithAutoID(collection_name, docData);
    // const id2 = await database.addDocumentWithAutoID(collection_name, docData2);
    // const id3 = await database.addDocumentWithAutoID(collection_name, docData3);
    // newTestDocuments.push({
    //   id: id1,
    //   ...docData,
    // });
    // newTestDocuments.push({
    //   id: id2,
    //   ...docData2,
    // });
    // newTestDocuments.push({
    //   id: id3,
    //   ...docData3,
    // });

    // Test getDocuments
    // No Filters, Sort by field
    let docs = await database.getDocuments<TestDocument>(
      collection_name,
      [],
      new Sort('field')
    );
    expect(docs).toEqual([
      newTestDocuments[0],
      newTestDocuments[1],
      newTestDocuments[2],
    ]);

    // No Filters, Sort by field descending
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [],
      new Sort('flield', false)
    );
    expect(docs).toEqual([
      newTestDocuments[2],
      newTestDocuments[1],
      newTestDocuments[0],
    ]);

    // Filter number > 1, Sort by field
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [new Filter('number', '>', 1)],
      new Sort('field')
    );
    expect(docs).toEqual([newTestDocuments[1], newTestDocuments[2]]);

    // Filter number > 1 and field == testDocument2, Sort by field
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [
        new Filter('number', '>', 1),
        new Filter('field', '==', 'testDocument2'),
      ],
      new Sort('field')
    );
    expect(docs).toEqual([newTestDocuments[2]]);

    // Filter number > 2 and field == testDocument0 , Sort by field
    docs = await database.getDocuments<TestDocument>(
      collection_name,
      [
        new Filter('number', '>', 2),
        new Filter('field', '==', 'testDocument0'),
      ],
      new Sort('field')
    );
    expect(docs).toEqual([]);
  });
});
